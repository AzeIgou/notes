import{_ as n,c as h,a2 as a,j as i,t,a as p,o as e}from"./chunks/framework.DnxPABkT.js";const c=JSON.parse('{"title":"Vue基础","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"frontend/vue03.md","filePath":"frontend/vue03.md"}'),k={name:"frontend/vue03.md"};function r(l,s,E,d,o,g){return e(),h("div",null,[s[4]||(s[4]=a(`<h1 id="vue基础" tabindex="-1">Vue基础 <a class="header-anchor" href="#vue基础" aria-label="Permalink to &quot;Vue基础&quot;">​</a></h1><h2 id="vue的两种开发方式" tabindex="-1">Vue的两种开发方式： <a class="header-anchor" href="#vue的两种开发方式" aria-label="Permalink to &quot;Vue的两种开发方式：&quot;">​</a></h2><h3 id="_1-vue核心包开发" tabindex="-1">1. Vue核心包开发 <a class="header-anchor" href="#_1-vue核心包开发" aria-label="Permalink to &quot;1. Vue核心包开发&quot;">​</a></h3><p>场景：局部模块改造</p><h3 id="_2-vue核心包-vue插件-工程化" tabindex="-1">2. Vue核心包&amp;Vue插件&amp;工程化 <a class="header-anchor" href="#_2-vue核心包-vue插件-工程化" aria-label="Permalink to &quot;2. Vue核心包&amp;Vue插件&amp;工程化&quot;">​</a></h3><p>场景：整站开发</p><h2 id="插值表达式" tabindex="-1">插值表达式 <a class="header-anchor" href="#插值表达式" aria-label="Permalink to &quot;插值表达式&quot;">​</a></h2><p>插值表达式是一种Vue的模板语法</p><h3 id="_1-作用-利用表达式进行插值-渲染到页面中" tabindex="-1">1.作用：利用表达式进行插值，渲染到页面中 <a class="header-anchor" href="#_1-作用-利用表达式进行插值-渲染到页面中" aria-label="Permalink to &quot;1.作用：利用表达式进行插值，渲染到页面中&quot;">​</a></h3><p>表达式：是可以被求值的代码</p><h3 id="_2-语法" tabindex="-1">2.语法 <a class="header-anchor" href="#_2-语法" aria-label="Permalink to &quot;2.语法&quot;">​</a></h3><p>插值表达式语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{title}}&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{nickName.toUpperCase()}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{age &gt;= </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? &#39;成年&#39;:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;未成年&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{obj.name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_3-错误用法" tabindex="-1">3.错误用法 <a class="header-anchor" href="#_3-错误用法" aria-label="Permalink to &quot;3.错误用法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1.在插值表达式中使用的数据 必须在data中进行了提供</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{hobby}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果在data中不存在 则会报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2.支持的是表达式，而非语句，比如：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   for </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{if}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3.不能在标签属性中使用 {{  }} 插值 (插值表达式只能标签中间使用)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{username}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是P标签&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="vue中的常用指令" tabindex="-1">Vue中的常用指令 <a class="header-anchor" href="#vue中的常用指令" aria-label="Permalink to &quot;Vue中的常用指令&quot;">​</a></h2><p><strong>概念：<strong>指令（Directives）是 Vue 提供的带有 <strong>v- 前缀</strong> 的 特殊 标签</strong>属性</strong>。</p><ul><li>内容渲染指令（v-html、v-text）</li><li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li><li>事件绑定指令（v-on）</li><li>属性绑定指令 （v-bind）</li><li>双向绑定指令（v-model）</li><li>列表渲染指令（v-for）</li></ul><h3 id="_1-内容渲染指令-v-text-v-html" tabindex="-1">1.内容渲染指令(v-text v-html) <a class="header-anchor" href="#_1-内容渲染指令-v-text-v-html" aria-label="Permalink to &quot;1.内容渲染指令(v-text v-html)&quot;">​</a></h3><ol><li>v-text（类似innerText）</li></ol><ul><li><ul><li>使用语法：<code>&lt;p v-text=&quot;uname&quot;&gt;hello&lt;/p&gt;</code>，意思是将 uame 值渲染到 p 标签中</li><li>类似 innerText，使用该语法，会覆盖 p 标签原有内容</li></ul></li></ul><ol start="2"><li>v-html（类似 innerHTML）</li></ol><ul><li><ul><li>使用语法：<code>&lt;p v-html=&quot;intro&quot;&gt;hello&lt;/p&gt;</code>，意思是将 intro 值渲染到 p 标签中</li><li>类似 innerHTML，使用该语法，会覆盖 p 标签原有内容</li><li>类似 innerHTML，使用该语法，能够将HTML标签的样式呈现出来。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;个人信息&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	// 既然指令是vue提供的特殊的html属性，所以咱们写的时候就当成属性来用即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;姓名：&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;intro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;简介：&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        const app = new Vue({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            el:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            data:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                uname:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                intro:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;h2&gt;这是一个&lt;strong&gt;非常优秀&lt;/strong&gt;的boy&lt;h2&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-条件渲染指令-v-if-v-show" tabindex="-1">2.条件渲染指令(v-if v-show) <a class="header-anchor" href="#_2-条件渲染指令-v-if-v-show" aria-label="Permalink to &quot;2.条件渲染指令(v-if v-show)&quot;">​</a></h3><p>条件判断指令，用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</p><ol><li><p>v-show</p><ol><li>作用： 控制元素显示隐藏</li><li>语法： <code> v-show = &quot;表达式&quot;</code> 表达式值为 true 显示， false 隐藏</li><li>原理： 切换 <code>display:none</code> 控制显示隐藏</li><li>场景：频繁切换显示隐藏的场景</li></ol></li><li><p>v-if</p><ol><li>作用： 控制元素显示隐藏（条件渲染）</li><li>语法： <code>v-if= &quot;表达式&quot;</code> 表达式值 true显示， false 隐藏</li><li>原理： 基于条件判断，是否创建 或 移除元素节点</li><li>场景： 要么显示，要么隐藏，不频繁切换的场景</li></ol></li></ol><h3 id="_3-事件绑定指令-v-on" tabindex="-1">3.事件绑定指令(v-on) <a class="header-anchor" href="#_3-事件绑定指令-v-on" aria-label="Permalink to &quot;3.事件绑定指令(v-on)&quot;">​</a></h3><h4 id="_1-使用vue时-如需为dom注册事件-及其的简单-语法如下" tabindex="-1">1. 使用Vue时，如需为DOM注册事件，及其的简单，语法如下： <a class="header-anchor" href="#_1-使用vue时-如需为dom注册事件-及其的简单-语法如下" aria-label="Permalink to &quot;1. 使用Vue时，如需为DOM注册事件，及其的简单，语法如下：&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:事件名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;内联语句&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">按钮</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:事件名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;处理函数&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">按钮</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:事件名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;处理函数(实参)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">按钮</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`v-on:\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 简写为 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span></code></pre></div><h4 id="_2-事件处理函数" tabindex="-1">2. 事件处理函数 <a class="header-anchor" href="#_2-事件处理函数" aria-label="Permalink to &quot;2. 事件处理函数&quot;">​</a></h4><ul><li>事件处理函数应该写到一个跟data同级的配置项（methods）中</li><li>methods中的函数内部的this都指向Vue实例</li></ul><h4 id="_3-给事件处理函数传参" tabindex="-1">3. 给事件处理函数传参 <a class="header-anchor" href="#_3-给事件处理函数传参" aria-label="Permalink to &quot;3. 给事件处理函数传参&quot;">​</a></h4><ul><li>如果不传递任何参数，则方法无需加小括号；methods方法中可以直接使用 e 当做事件对象</li></ul><h3 id="_3-属性绑定指令-v-bind" tabindex="-1">3.属性绑定指令(v-bind) <a class="header-anchor" href="#_3-属性绑定指令-v-bind" aria-label="Permalink to &quot;3.属性绑定指令(v-bind)&quot;">​</a></h3><ol><li><strong>作用</strong>:动态设置html的标签属性 比如：src、url、title</li><li><strong>语法</strong>：<code>v-bind:</code> 属性名=“表达式”</li><li><strong>v-bind</strong>:可以简写成 =&gt; <strong>:</strong></li></ol><h3 id="_4-列表渲染指令-v-for" tabindex="-1">4.列表渲染指令(v-for) <a class="header-anchor" href="#_4-列表渲染指令-v-for" aria-label="Permalink to &quot;4.列表渲染指令(v-for)&quot;">​</a></h3><p>Vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p><p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p><ul><li>item 是数组中的每一项</li><li>index 是每一项的索引，不需要可以省略</li><li>arr 是被遍历的数组</li></ul><p>此语法也可以遍历<strong>对象和数字</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//遍历对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(value, key, index) in object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{value}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:对象中的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:对象中的键</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:遍历索引从0开始</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//遍历数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item in 10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{item}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item从1 开始</span></span></code></pre></div><h4 id="v-for中的key" tabindex="-1">v-for中的key <a class="header-anchor" href="#v-for中的key" aria-label="Permalink to &quot;v-for中的key&quot;">​</a></h4><p><strong>语法：</strong> <code>key=&quot;唯一值&quot;</code></p><p><strong>作用：<strong>给列表项添加的</strong>唯一标识</strong>。便于Vue进行列表项的<strong>正确排序复用</strong>。</p><p>**为什么加key：**Vue 的默认行为会尝试原地修改元素（<strong>就地复用</strong>）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(item, index) in booksList&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :key=&quot;item.id&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;span&gt;{{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> item.name</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> }}&lt;/span&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;span&gt;{{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> item.author</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> }}&lt;/span&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;button</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;del(item.id)&quot;&gt;删除&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  &lt;/li&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;/ul&gt;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ol><li>key 的值只能是字符串 或 数字类型</li><li>key 的值必须具有唯一性</li><li>推荐使用 id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）</li></ol></div><h3 id="_5-双向绑定指令-v-model" tabindex="-1">5.双向绑定指令（v-model） <a class="header-anchor" href="#_5-双向绑定指令-v-model" aria-label="Permalink to &quot;5.双向绑定指令（v-model）&quot;">​</a></h3><p>所谓双向绑定就是：</p><ol><li>数据改变后，呈现的页面结果会更新</li><li>页面结果更新后，数据也会随之而变</li></ol><p><strong>作用：</strong> 给<strong>表单元素</strong>（input、radio、select）使用，双向绑定数据，可以快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素内容</p><p><strong>语法</strong>:<code>v-model=&quot;变量&quot;</code></p><h3 id="_6-指令修饰符" tabindex="-1">6.指令修饰符 <a class="header-anchor" href="#_6-指令修饰符" aria-label="Permalink to &quot;6.指令修饰符&quot;">​</a></h3><h4 id="_1-什么是指令修饰符" tabindex="-1">1.什么是指令修饰符？ <a class="header-anchor" href="#_1-什么是指令修饰符" aria-label="Permalink to &quot;1.什么是指令修饰符？&quot;">​</a></h4><p>​ 所谓指令修饰符就是通过“.”指明一些指令<strong>后缀</strong> 不同的<strong>后缀</strong>封装了不同的处理操作 —&gt; 简化代码</p><h4 id="_2-按键修饰符" tabindex="-1">2.按键修饰符 <a class="header-anchor" href="#_2-按键修饰符" aria-label="Permalink to &quot;2.按键修饰符&quot;">​</a></h4><p>-<code> @keyup.enter</code> —&gt;当点击enter键的时候才触发</p><h4 id="_3-v-model修饰符" tabindex="-1">3.v-model修饰符 <a class="header-anchor" href="#_3-v-model修饰符" aria-label="Permalink to &quot;3.v-model修饰符&quot;">​</a></h4><ul><li><code>v-model.trim</code> —&gt;去除首位空格</li><li><code> v-model.number</code> —&gt;转数字</li></ul><p>4.事件修饰符</p><ul><li><code>@事件名.stop</code> —&gt; 阻止冒泡</li><li><code>@事件名.prevent</code> —&gt;阻止默认行为</li><li><code>@事件名.stop.prevent</code> —&gt;可以连用 即阻止事件冒泡也阻止默认行为</li></ul><h3 id="_7-v-bind对样式控制的增强-操作class" tabindex="-1">7.v-bind对样式控制的增强-操作class <a class="header-anchor" href="#_7-v-bind对样式控制的增强-操作class" aria-label="Permalink to &quot;7.v-bind对样式控制的增强-操作class&quot;">​</a></h3><p>为了方便开发者进行样式控制， Vue 扩展了 v-bind 的语法，可以针对 <strong>class 类名</strong> 和 <strong>style 行内样式</strong> 进行控制 。</p><h4 id="_1-语法" tabindex="-1">1.语法： <a class="header-anchor" href="#_1-语法" aria-label="Permalink to &quot;1.语法：&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; :class = &quot;对象/数组&quot;&gt;这是一个div&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="_2-对象语法" tabindex="-1">2.对象语法 <a class="header-anchor" href="#_2-对象语法" aria-label="Permalink to &quot;2.对象语法&quot;">​</a></h4><p>当class动态绑定的是<strong>对象</strong>时，<strong>键就是类名，值就是布尔值</strong>，如果值是<strong>true</strong>，就有这个类，否则没有这个类</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ 类名1: 布尔值, 类名2: 布尔值 }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="_3-数组语法" tabindex="-1">3.数组语法 <a class="header-anchor" href="#_3-数组语法" aria-label="Permalink to &quot;3.数组语法&quot;">​</a></h4><p>当class动态绑定的是<strong>数组</strong>时 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[ 类名1, 类名2, 类名3 ]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="computed计算属性" tabindex="-1">computed计算属性 <a class="header-anchor" href="#computed计算属性" aria-label="Permalink to &quot;computed计算属性&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1.概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1.概念&quot;">​</a></h3><p>基于<strong>现有的数据</strong>，计算出来的<strong>新属性</strong>。 <strong>依赖</strong>的数据变化，<strong>自动</strong>重新计算。</p><h3 id="_2-语法-1" tabindex="-1">2.语法 <a class="header-anchor" href="#_2-语法-1" aria-label="Permalink to &quot;2.语法&quot;">​</a></h3>`,76)),i("ol",null,[s[0]||(s[0]=i("li",null,"声明在 computed 配置项中，一个计算属性对应一个函数",-1)),i("li",null,"使用起来和普通属性一样使用 "+t(l.计算属性名),1)]),s[5]||(s[5]=a('<div class="warning custom-block"><p class="custom-block-title">3.注意</p><ol><li>computed配置项和data配置项是<strong>同级</strong>的</li><li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他<strong>依然是个属性</strong></li><li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li><li>使用computed中的计算属性和使用data中的属性是一样的用法</li><li>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></li></ol></div><h2 id="computed计算属性-vs-methods方法" tabindex="-1">computed计算属性 VS methods方法 <a class="header-anchor" href="#computed计算属性-vs-methods方法" aria-label="Permalink to &quot;computed计算属性 VS methods方法&quot;">​</a></h2><h3 id="_1-computed计算属性" tabindex="-1">1.computed计算属性 <a class="header-anchor" href="#_1-computed计算属性" aria-label="Permalink to &quot;1.computed计算属性&quot;">​</a></h3><p>作用：封装了一段对于<strong>数据</strong>的处理，求得一个<strong>结果</strong></p><h4 id="语法" tabindex="-1">语法： <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法：&quot;">​</a></h4>',5)),i("ol",null,[s[3]||(s[3]=i("li",null,"写在computed配置项中",-1)),i("li",null,[s[2]||(s[2]=p("作为属性，直接使用 ")),i("ul",null,[s[1]||(s[1]=i("li",null,"js中使用计算属性： this.计算属性",-1)),i("li",null,"模板中使用计算属性："+t(l.计算属性),1)])])]),s[6]||(s[6]=a(`<h3 id="_2-methods计算属性" tabindex="-1">2.methods计算属性 <a class="header-anchor" href="#_2-methods计算属性" aria-label="Permalink to &quot;2.methods计算属性&quot;">​</a></h3><p>作用：给Vue实例提供一个<strong>方法</strong>，调用以<strong>处理业务逻辑</strong>。</p><h4 id="语法-1" tabindex="-1">语法： <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法：&quot;">​</a></h4><ol><li>写在methods配置项中</li><li>作为方法调用 <ul><li>js中调用：this.方法名()</li><li></li></ul></li></ol><h3 id="_3-计算属性的优势" tabindex="-1">3.计算属性的优势 <a class="header-anchor" href="#_3-计算属性的优势" aria-label="Permalink to &quot;3.计算属性的优势&quot;">​</a></h3><ol><li><p>缓存特性（提升性能）</p><p>计算属性会对计算出来的结果缓存，再次使用直接读取缓存，</p><p>依赖项变化了，会自动重新计算 → 并再次缓存</p></li><li><p>methods没有缓存特性</p></li></ol><h3 id="_4-总结" tabindex="-1">4.总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4.总结&quot;">​</a></h3><p>1.computed<strong>有缓存特性</strong>，methods<strong>没有缓存</strong></p><p>2.当一个结果依赖其他多个值时，推荐使用计算属性</p><p>3.当处理业务逻辑时，推荐使用methods方法，比如事件的处理函数</p><h2 id="watch侦听器-监视器" tabindex="-1">watch侦听器（监视器） <a class="header-anchor" href="#watch侦听器-监视器" aria-label="Permalink to &quot;watch侦听器（监视器）&quot;">​</a></h2><h3 id="_1-作用" tabindex="-1">1.作用： <a class="header-anchor" href="#_1-作用" aria-label="Permalink to &quot;1.作用：&quot;">​</a></h3><p>​ <strong>监视数据变化</strong>，执行一些业务逻辑或异步操作</p><h3 id="_2-语法-2" tabindex="-1">2.语法： <a class="header-anchor" href="#_2-语法-2" aria-label="Permalink to &quot;2.语法：&quot;">​</a></h3><ol><li><p>watch同样声明在跟data同级的配置项中</p></li><li><p>简单写法： 简单类型数据直接监视</p></li><li><p>完整写法：添加额外配置项</p><ul><li><p>deep:true 对复杂类型进行深度监听</p></li><li><p>immdiate:true 初始化 立刻执行一次</p></li></ul></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;苹果&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;苹果&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 该方法会在数据变化时，触发执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     数据属性名 (newValue, oldValue) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       一些业务逻辑 或 异步操作。 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;对象.属性名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (newValue, old Value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       一些业务逻辑 或 异步操作。 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><h2 id="vue生命周期" tabindex="-1">Vue生命周期 <a class="header-anchor" href="#vue生命周期" aria-label="Permalink to &quot;Vue生命周期&quot;">​</a></h2><p>思考：什么时候可以发送初始化渲染请求？（越早越好）什么时候可以开始操作dom？（至少dom得渲染出来）</p><p>Vue生命周期：就是一个Vue实例从创建 到 销毁 的整个过程。</p><p>生命周期四个阶段：① 创建 ② 挂载 ③ 更新 ④ 销毁</p><ol><li><p>创建阶段：创建响应式数据 (beforeCreate created)</p></li><li><p>挂载阶段：渲染模板 (beforeMount mounted)</p></li><li><p>更新阶段：修改数据，更新视图（beforeUpdate updated)</p></li><li><p>销毁阶段：销毁Vue实例(beforeDestroy destroyed)</p></li></ol><h2 id="组件化开发" tabindex="-1">组件化开发 <a class="header-anchor" href="#组件化开发" aria-label="Permalink to &quot;组件化开发&quot;">​</a></h2><p>​ 组件化：一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</p><p>​ 好处：便于维护，利于复用 → 提升开发效率。</p><p>​ 组件分类：普通组件、根组件。</p><h3 id="组件由三部分构成" tabindex="-1">组件由三部分构成 <a class="header-anchor" href="#组件由三部分构成" aria-label="Permalink to &quot;组件由三部分构成&quot;">​</a></h3><ul><li>template：结构 （有且只能一个根元素）</li><li>script: js逻辑</li><li>style： 样式 (可支持less，需要装包)</li></ul><p>组件通信，就是指组件与组件之间的数据传递</p><ul><li>组件的数据是独立的，无法直接访问其他组件的数据。</li><li>想使用其他组件的数据，就需要组件通信</li></ul><h3 id="组件关系分类" tabindex="-1">组件关系分类 <a class="header-anchor" href="#组件关系分类" aria-label="Permalink to &quot;组件关系分类&quot;">​</a></h3><ol><li>父子关系</li><li>非父子关系</li></ol><h4 id="父子通信流程" tabindex="-1">父子通信流程 <a class="header-anchor" href="#父子通信流程" aria-label="Permalink to &quot;父子通信流程&quot;">​</a></h4><ol><li>父组件通过 props 将数据传递给子组件</li><li>子组件利用 $emit 通知父组件修改更新</li></ol><h4 id="父向子传值步骤" tabindex="-1">父向子传值步骤 <a class="header-anchor" href="#父向子传值步骤" aria-label="Permalink to &quot;父向子传值步骤&quot;">​</a></h4><ol><li>给子组件以添加属性的方式传值</li><li>子组件内部通过props接收</li><li>模板中直接使用 props接收的值</li></ol><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;border: 3px solid #000; margin: 10px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    我是APP组件 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Son</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Son</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Son </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./components/Son.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      myTitle: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;学前端，就来黑马程序员&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Son,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;son&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;border:3px solid #000;margin:10px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    我是Son组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Son-Child&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="子向父通信代码示例" tabindex="-1">子向父通信代码示例 <a class="header-anchor" href="#子向父通信代码示例" aria-label="Permalink to &quot;子向父通信代码示例&quot;">​</a></h4><p>子组件利用 $emit 通知父组件，进行修改更新</p><p>子向父传值步骤</p><ol><li>$emit触发事件，给父组件发送消息通知</li><li>父组件监听$emit触发的事件</li><li>提供处理函数，在函数的性参中获取传过来的参数</li></ol><h3 id="什么是props" tabindex="-1">什么是props <a class="header-anchor" href="#什么是props" aria-label="Permalink to &quot;什么是props&quot;">​</a></h3><p>1.Props 定义</p><p>组件上 注册的一些 自定义属性</p><p>2.Props 作用</p><p>向子组件传递数据</p><p>3.特点</p><ol><li>可以 传递 任意数量 的prop</li><li>可以 传递 任意类型 的prop</li></ol><p>props校验完整写法</p><p>1.语法</p><p>vue</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  校验的属性名: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: 类型,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number String Boolean ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否必填</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    default: 默认值, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 自定义校验逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是否通过校验</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div>`,52))])}const u=n(k,[["render",r]]);export{c as __pageData,u as default};
